
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lsrbeymronxrrgwekevc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzcmJleW1yb254cnJnd2VrZXZjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzODk4NjAsImV4cCI6MjA1Nzk2NTg2MH0.AdQabFjdOyr81EbHRS5Rx7-ZxafaAkE3beDAWfoT_Bo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Authentication helper functions
export const getCurrentUser = async () => {
  const { data, error } = await supabase.auth.getSession();
  if (error || !data.session) return null;
  return data.session.user;
};

export const getUserDisplayName = async () => {
  const user = await getCurrentUser();
  if (!user) return null;
  
  // First check if user_metadata has a name field
  if (user.user_metadata && user.user_metadata.name) {
    return user.user_metadata.name;
  }
  
  // Fall back to email if no display name is set
  return user.email;
};

export const signIn = async (emailOrDisplayName: string, password: string) => {
  // First try to sign in with email
  const { data: emailSignInData, error: emailSignInError } = await supabase.auth.signInWithPassword({
    email: emailOrDisplayName,
    password,
  });

  // If successful with email, return the result
  if (!emailSignInError) {
    return { data: emailSignInData, error: null };
  }

  // If email sign-in fails, check if it's a display name from name field in user_metadata
  try {
    console.log('Trying to sign in with display name (from name field):', emailOrDisplayName);
    
    // Get all users (this requires admin rights, which we simulate here with profiles table)
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('user_id, email')
      .match({ display_name: emailOrDisplayName });

    if (usersError) {
      console.error('Error querying profiles:', usersError);
      return { data: null, error: emailSignInError };
    }
    
    if (!users || users.length === 0) {
      console.log('No user found with display name:', emailOrDisplayName);
      return { data: null, error: emailSignInError };
    }

    // Try each matching user
    for (const userData of users) {
      if (!userData.email) {
        console.log('No email found for user with ID:', userData.user_id);
        continue;
      }

      console.log('Attempting login with email from display name match:', userData.email);
      
      // Try to sign in with this user's email
      const { data, error } = await supabase.auth.signInWithPassword({
        email: userData.email,
        password,
      });

      if (!error) {
        console.log('Successfully signed in with display name match');
        return { data, error: null };
      }
      
      console.log('Failed to sign in with this email, trying next if available');
    }

    // If we've tried all matching users and none worked
    console.log('No successful login with any matching display name');
    return { data: null, error: emailSignInError };
  } catch (error) {
    console.error("Error in display name lookup:", error);
    return { data: null, error: emailSignInError };
  }
};

export const signOut = async () => {
  return await supabase.auth.signOut();
};

export const isUserAdmin = async () => {
  const user = await getCurrentUser();
  if (!user) return false;
  
  // Check if user has admin role in metadata
  return user.app_metadata?.role === 'admin';
};

export const createUserByAdmin = async (email: string, password: string, role: 'admin' | 'user' = 'user', displayName?: string) => {
  const metadata = { role };
  
  // Add display name if provided
  const userMetadata = displayName ? { name: displayName } : undefined;
  
  const { data, error } = await supabase.auth.admin.createUser({
    email,
    password,
    email_confirm: true,
    app_metadata: metadata,
    user_metadata: userMetadata,
  });

  // If user was created successfully and display name was provided, add to profiles table
  if (!error && data && displayName) {
    await createUserProfile(data.user.id, email, displayName);
  }
  
  return { data, error };
};

export const updateUserDisplayName = async (displayName: string) => {
  const user = await getCurrentUser();
  if (!user) {
    return { data: null, error: new Error('User not authenticated') };
  }

  console.log('Starting display name update process for user:', user.id);
  console.log('New display name:', displayName);

  try {
    // Step 1: Directly update the user's metadata with the new display name
    // This should update the name field in user_metadata in auth.users
    const { data: userData, error: userError } = await supabase.auth.updateUser({
      data: { name: displayName }
    });

    if (userError) {
      console.error('Error updating user metadata:', userError);
      return { data: null, error: userError };
    }

    console.log('Auth.updateUser completed successfully');
    console.log('User metadata after direct update:', userData?.user.user_metadata);

    // Step 2: Call our SQL function to update the display name in auth.users table
    // This ensures the raw_user_meta_data in auth.users table is updated properly
    const { error: functionError } = await supabase.rpc('update_user_display_name', {
      user_id_param: user.id,
      display_name_param: displayName
    });
    
    if (functionError) {
      console.error('Error updating auth.users table:', functionError);
    } else {
      console.log('Auth users table updated successfully with display name:', displayName);
    }
    
    // Step 3: Update the user's profile in our profiles table
    // This makes the display name available for queries via the profiles table
    await upsertUserProfile(user.id, user.email || '', displayName);
    
    // Log successful update for debugging
    console.log('Display name updated in all places:', displayName);
    
    // Step 4: Force a refresh of the session to ensure updated metadata is available
    // This is critical for seeing the changes immediately in the Supabase admin UI
    console.log('Refreshing session to update metadata...');
    const { error: refreshError } = await supabase.auth.refreshSession();
    
    if (refreshError) {
      console.error('Error refreshing session after display name update:', refreshError);
    } else {
      console.log('Session refreshed successfully after display name update');
      
      // Verify the updated metadata after refresh
      const { data: verifyData } = await supabase.auth.getSession();
      console.log('Verified session metadata after refresh:', 
        verifyData?.session?.user?.user_metadata);
    }
    
    return { data: userData, error: null };
  } catch (error) {
    console.error('Unexpected error in display name update process:', error);
    return { data: null, error: error as Error };
  }
};

// Helper functions to manage user profiles
export const createUserProfile = async (userId: string, email: string, displayName: string) => {
  console.log('Creating profile for:', userId, email, displayName);
  // Use RPC call with type assertion to fix TypeScript error
  return await supabase
    .rpc('create_profile', {
      user_id_param: userId,
      email_param: email,
      display_name_param: displayName
    } as any);
};

export const upsertUserProfile = async (userId: string, email: string, displayName: string) => {
  console.log('Upserting profile for:', userId, email, displayName);
  // Use RPC call with type assertion to fix TypeScript error
  return await supabase
    .rpc('upsert_profile', {
      user_id_param: userId,
      email_param: email,
      display_name_param: displayName
    } as any);
};

export const getUserByDisplayName = async (displayName: string) => {
  // Use RPC call with type assertion to fix TypeScript error
  const { data, error } = await supabase
    .rpc('get_profile_by_display_name', {
      display_name_param: displayName
    } as any);
  
  return { data, error };
};
